
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Game.InputMonitor
use Libraries.Game.Graphics.Label
use Libraries.Game.Graphics.Color

use Libraries.Game.Game
use Libraries.Game.Graphics.Drawable
use Libraries.System.SystemHelper
use Libraries.Containers.Array
use Libraries.Compute.Random

/*
    This is a default class for creating a game in Quorum. Note that the Main 
    action begins by calling StartGame(), which loads a window a game can 
    be displayed in. The action CreateGame is where the game should load any 
    assets, like images to be displayed, frames of animation, or sounds to be
    played. 
*/
class Main is Game
    integer j = 0
    text space = " "
InputMonitor keyboard
KeyboardEvent pressbutton
    Label spaces
Label helptext
Drawable background
Drawable canvas

    Color color 
    /*    This action, Main, starts our computer program. In Quorum, programs always
        begin from Main.
    */
    action Main
        StartGame()
    end

    /*
        This action sets up the default values for a game. For example, we might
        use the Libraries.Game.Graphics.Drawable class to load up an image or 
        a shape. Or, we might add a Libraries.Interface.Button for making something clickable
        or a Libraries.Interface.TextBox for gathering user input in a game.
    */
    action CreateGame
        RandomGenerator()
helptext:SetText("Press enter to start game or press X to exit.")
helptext:SetSize(34)
helptext:SetColor(color:Yellow())

background:LoadFilledRectangle(13666, 768)
canvas:LoadFilledRectangle(80, 80)
canvas:SetColor(color:White())
canvas:LoadRectangle(80, 80)
canvas:SetPosition(5, 5)
canvas:SetColor(color:White())

background:SetColor(color:Black())
Add(background)
Add(helptext)
Add(canvas)
    end

    /*
        The update action is called on every "frame" of animation in a game. This
        action should be used to do operations on items. So, for example, we 
        might use this action to change frames of animation, to rotate items, 
        or to make creatures jump.
    */
 
    action Update(number seconds)
spaces:SetPosition(350, 350)
        spaces:SetColor(color:White())

spaces:SetSize(87)

        spaces:SetText(space)
        Add(spaces)
            if   keyboard:IsKeyPressed(pressbutton:X)
                    Exit()
            end
    end


    action RandomGenerator
        Array<integer> block
        integer i = 10
        SystemHelper halt
              //   halt:Sleep(100)
        Random spin 
        repeat 15 times
            i =  spin:RandomIntegerBetween(1,10)
            boolean Check = HasElement(i,block)
            if Check = false
                block:Add(i)
            end
        end
        integer a = 0        


        output "Array size " + block:GetSize()
        repeat 5 times
//            say block:Get(j)
            //halt:Sleep(500)            
            a = a + 300
           // halt:Sleep(a)
            space = cast(text,block:Get(j))
            //output space
            //halt:Sleep(200)
            j = j+1
        end
         
    end
    action HasElement(integer k,Array<integer> block) returns boolean
        boolean result = true
        result = block:Has(k) 
        return result 
    end
    
end